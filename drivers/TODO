#WARNING: You might find the following content disturbing, don't read it if you don't want to get overwhelmed.

Take the kernel module you wrote for task 01, and modify it to be a misc char device driver.

The misc interface is a very simple way to be able to create a character device, without having
to worry about all of the sysfs and character device registration mess. And what a mess it is,
so stick to the simple interfaces wherever possible.

The misc device should be created with a dynamic minor number, no need running off and trying
to reserve a real minor number for your test module, that would be crazy.

The misc device should implement the read and write functions.
The misc device node should show up in /dev/pesuio .

When the character device node is read from, your assigned id is returned to the caller.
When the character device node is written to, the data sent to the kernel needs to be checked.
If it matches your assigned id, then return a correct write return value. If the value does not
match your assigned id, return the "invalid value" error value.

The misc device should be registered when your module is loaded, and unregistered when it is unloaded.

what to do next? (This here is purely an extension and is pretty advanced.
I don't expect you guys to understand this at all)

Delete the read function. You don't need that anymore, so make it a write-only misc device and be
sure to set the mode of the device to be write-only, by anyone. If you do this right, udev will set
up the node automatically with the correct permissions.

Create a wait queue, name it "wee_wait".
In your module init function, create a kernel thread, named of course "pesuio".

The thread's main function should not do anything at this point in time, except make sure to shutdown
if asked to, and wait on the "wee_wait" waitqueue.
In your module exit function, shut down the kernel thread you started up.

The kernel has a unique way of creating and handling linked lists, that is quite different than the "textbook" way of doing so. But, it turns out to be faster, and simpler, than a "textbook" would describe, so that's a good thing.

For this task, write a kernel module, based on your cleaned up one from task 04, that does the following:

You have a structure that has 3 fields: char name[20]; int id; bool busy; name this structure "identity".

Your module has a static variable that points to a list of these "identity" structures.

Write a function that looks like: int identity_create(char *name, int id) that creates the structure "identity", copies in the 'name' and 'id' fields and sets 'busy' to false. Proper error checking for out of memory issues is required. Return 0 if everything went ok; an error value if something went wrong.

Write a function that looks like: struct identity *identity_find(int id); that takes a given id, iterates over the list of all ids, and returns the proper 'struct identity' associated with it. If the identity is not found, return NULL.

Write a function that looks like: void identity_destroy(int id); that given an id, finds the proper 'struct identity' and removes it from the system.

Your module_init() function will look much like the following:

struct identity *temp;

identity_create("Alice", 1);
identity_create("Bob", 2);
identity_create("Dave", 3);
identity_create("Gena", 10);

temp = identity_find(3);
pr_debug("id 3 = %s\n", temp->name);

temp = identity_find(42);
if (temp == NULL)
        pr_debug("id 42 not found\n");

identity_destroy(2);
identity_destroy(1);
identity_destroy(10);
identity_destroy(42);
identity_destroy(3);

Now,

Copy the structure into this module, and the identity_create(), identity_find(), and identity_destroy() functions into this module as well.

Write a new function, identity_get(), that looks like: struct identity *identity_get(void); and returns the next "identity" structure that is on the list, and removes it from the list. If nothing is on the list, return NULL.

Then, hook up the misc char device "write" function to do the following:

If a write is larger than 19 characters, truncate it at 19.
Take the write data and pass it to identity_create() as the string, and use an incrementing counter as the "id" value.
Wake up the "wee_wait" queue.
In the kernel thread function:

If the "wee_wait" queue wakes us up, get the next identity in the system with a call to identity_get().
Sleep (in an interruptable state, don't go increasing the system load in a bad way) for 5 seconds.
Write out the identity name, and id to the debug kernel log and then free the memory.
When the module exits, clean up the whole list by using the functions given, no fair mucking around with the list variables directly.
